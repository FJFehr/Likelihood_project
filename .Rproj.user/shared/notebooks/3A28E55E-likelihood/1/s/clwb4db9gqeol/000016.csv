"0","#overlay distributions"
"0","#generate zip_predictions"
"0","# generate_zip_prob <- function(lambda,pi,x){"
"0","#   "
"0","#   if(x == 0){"
"0","#     return(pi + (1-pi)*exp(-lambda))"
"0","#   }else{"
"0","#     return((1-pi)*dpois(x=x,lambda=lambda))"
"0","#     "
"0","#   }"
"0","#   "
"0","# }"
"0","generate_negbinom_prob <- function(m,r,x){"
"0","  "
"0","  (gamma(r + x))/(factorial(x)*gamma(r)) * (m/(m+r))^(x) * (r /(r+m))^(r)"
"0","  "
"0","}"
"0","probs <- numeric(81)"
"0","for (i in 0:80){"
"0","  probs[i+1] <- generate_negbinom_prob(m = m_estimate , r = r_estimate , x=i)"
"0","}"
"0","#get expected frequencies"
"0","expected_freq <- probs*n"
"0","comparison_df <- table(dat$Counts) %>% "
"0","                 as_data_frame %>% "
"0","                 rename(accident_count = Var1,"
"0","                        observed = n) %>% "
"0","                 mutate(expected = expected_freq[1:56],"
"0","                        accident_count = as.numeric(accident_count)) %>%  #take only first 56 values"
"0","                 gather(Type,`Frequency` ,c(observed,expected))"
"0","ggplot(comparison_df, aes(x = accident_count , y = Frequency , fill = Type )) +"
"0","  geom_bar( stat=""identity"",alpha = .8,"
"0","          position=""dodge"") +"
"0","  labs(x=""Accident counts"", y=""Frequency"" , title=""Observed vs Expected Frequencies as per Negative Binomial"") +"
"0","  theme_classic() +"
"0","  theme(plot.title = element_text(hjust=0.5))"
