calc_negbinom_loglik_profile <- function(r,m){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_mean <- function(){
#Calculate profile for M by calculating mle for R at eacg value of M
estimated_r_s <- numeric(112)
for(m in seq(1,56,by=0.5)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
m = m,
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_r_s[m] <- mle_profile$par
}
return(estimated_r_s)
}
estimated_r_values <- profile_likelihood_calc_mean()
#For each r in estimated_r_values, sub in M from 1:56 and trace it
m_profile_loglik_values <- numeric(112)
for (i in seq_along(estimated_r_values)){
m_profile_loglik_values[i] <- calc_negbinom_loglik_profile(r = estimated_r_values[i], m = i)
}
data_frame(x = seq(1,56,by=0.5), val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_minimal()
3
#need to calulcate mle at EACH point
calc_negbinom_loglik_profile <- function(r,m){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_mean <- function(){
#Calculate profile for M by calculating mle for R at eacg value of M
estimated_r_s <- numeric(56)
for(m in 1:56){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
m = m,
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_r_s[m] <- mle_profile$par
}
return(estimated_r_s)
}
estimated_r_values <- profile_likelihood_calc_mean()
#For each r in estimated_r_values, sub in M from 1:56 and trace it
m_profile_loglik_values <- numeric(56)
for (i in seq_along(estimated_r_values)){
m_profile_loglik_values[i] <- calc_negbinom_loglik_profile(r = estimated_r_values[i], m = i)
}
data_frame(x = 1:56, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_minimal()
plot(x = 1:56 , y = m_profile_loglik_values , type = "l", xlab = "M parameter value", ylab = "Profile Loglikelihood")
points(x = which.max(m_profile_loglik_values), y = max(m_profile_loglik_values), col = "red")
lines(x = 7, col ="red")
axis(side = 1 , at = seq(0,56,by =1) , labels =  seq(0,56,by =1) )
data_frame(x = 1:56, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_minimal()
data_frame(x = 1:56, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
data_frame(x = 1:56, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
geom_vline(x = 7, col = "red", lty = "dashed") +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
data_frame(x = 1:56, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
geom_vline(xintercept = 7, col = "red", lty = "dashed") +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
m_range <- seq(1:56, by = 0.25)
m_range <- seq(1,56, by = 0.25)
m_range <- seq(1,56, by = 0.25) #values of m for profile m loglikelihood
m_range <- seq(1,56, by = 0.25) #values of m for profile m loglikelihood
calc_negbinom_loglik_profile <- function(r,m){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_mean <- function(){
#Calculate profile for M by calculating mle for R at eacg value of M
estimated_r_s <- numeric(length(m_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
m = m_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_r_s[i] <- mle_profile$par
}
return(estimated_r_s)
}
#need to calulcate mle at EACH point
m_range <- seq(1,56, by = 0.25) #values of m for profile m loglikelihood
calc_negbinom_loglik_profile <- function(r,m){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_mean <- function(){
#Calculate profile for M by calculating mle for R at eacg value of M
estimated_r_s <- numeric(length(m_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
m = m_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_r_s[i] <- mle_profile$par
}
return(estimated_r_s)
}
estimated_r_values <- profile_likelihood_calc_mean()
estimated_r_values
m_profile_loglik_values <- numeric(length(m_range))
m_range <- seq(1,56, by = 0.25) #values of m for profile m loglikelihood
calc_negbinom_loglik_profile <- function(r,m){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_mean <- function(){
#Calculate profile for M by calculating mle for R at eacg value of M
estimated_r_s <- numeric(length(m_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
m = m_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_r_s[i] <- mle_profile$par
}
return(estimated_r_s)
}
estimated_r_values <- profile_likelihood_calc_mean()
#For each r in estimated_r_values, sub in M from 1:56 and trace it
m_profile_loglik_values <- numeric(length(m_range))
for (i in seq_along(estimated_r_values)){
m_profile_loglik_values[i] <- calc_negbinom_loglik_profile(r = estimated_r_values[i], m = m_range[i])
}
m_profile_loglik_values
data_frame(x = m_range, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
# scale_x_continuous(breaks = seq(0,56,by=1)) +
#geom_vline(xintercept = 7, col = "red", lty = "dashed") +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
data_frame(x = m_range, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
# scale_x_continuous(breaks = seq(0,56,by=1)) +
#geom_vline(xintercept = 7, col = "red", lty = "dashed") +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
data_frame(x = m_range, val = m_profile_loglik_values) %>% filter(val = max(val))
data_frame(x = m_range, val = m_profile_loglik_values) %>% filter(val == max(val))
m_estimate
m_range <- seq(1,56, by = 0.1) #values of m for profile m loglikelihood
calc_negbinom_loglik_profile <- function(r,m){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_mean <- function(){
#Calculate profile for M by calculating mle for R at eacg value of M
estimated_r_s <- numeric(length(m_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
m = m_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_r_s[i] <- mle_profile$par
}
return(estimated_r_s)
}
estimated_r_values <- profile_likelihood_calc_mean()
#For each r in estimated_r_values, sub in M from 1:56 and trace it
m_profile_loglik_values <- numeric(length(m_range))
for (i in seq_along(estimated_r_values)){
m_profile_loglik_values[i] <- calc_negbinom_loglik_profile(r = estimated_r_values[i], m = m_range[i])
}
data_frame(x = m_range, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
geom_vline(xintercept = 7, col = "red", lty = "dashed") +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
data_frame(x = m_range, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
geom_vline(xintercept = 7, col = "red", lty = "dashed") +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
data_frame(x = m_range, val = m_profile_loglik_values) %>%
View
r_range <- seq(0.01,0.40 , by = 0.01)
profile_likelihood_calc_shape <- function(){
#Calculate profile for R by calculating mle for M at eacg value of R
estimated_m_s <- numeric(length(r_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
r = r_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_m_s[i] <- mle_profile$par
}
return(estimated_m_s)
}
estimated_m_values <- profile_likelihood_calc_shape()
profile_likelihood_calc_shape <- function(){
#Calculate profile for R by calculating mle for M at eacg value of R
estimated_m_s <- numeric(length(r_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
r = r_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 1,
upper = 100 ,
method = "L-BFGS-B"
)
estimated_m_s[i] <- mle_profile$par
}
return(estimated_m_s)
}
estimated_m_values <- profile_likelihood_calc_shape()
estimated_r_values
estimated_m_values
r_range
calc_negbinom_loglik_profile(r =0.01 , 6)
calc_negbinom_loglik_profile(r =0.01 , 1)
calc_negbinom_loglik_profile(r =0.4 , 1)
calc_negbinom_loglik_profile <- function(m,r){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
rofile_likelihood_calc_shape <- function(){
#Calculate profile for R by calculating mle for M at eacg value of R
estimated_m_s <- numeric(length(r_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
r = r_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 1,
upper = 100 ,
method = "L-BFGS-B"
)
estimated_m_s[i] <- mle_profile$par
}
return(estimated_m_s)
}
estimated_m_values <- profile_likelihood_calc_shape()
r_range[4]
calc_negbinom_loglik_profile <- function(m,r){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_shape <- function(){
#Calculate profile for R by calculating mle for M at eacg value of R
estimated_m_s <- numeric(length(r_range))
for(i in seq_along(r_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
r = r_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 1,
upper = 100 ,
method = "L-BFGS-B"
)
estimated_m_s[i] <- mle_profile$par
}
return(estimated_m_s)
}
estimated_m_values <- profile_likelihood_calc_shape()
estimated_m_values
calc_negbinom_loglik_profile <- function(m,r){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_shape <- function(){
#Calculate profile for R by calculating mle for M at eacg value of R
estimated_m_s <- numeric(length(r_range))
for(i in seq_along(r_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
r = r_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 1,
upper = 100 ,
method = "L-BFGS-B"
)
estimated_m_s[i] <- mle_profile$par
}
return(estimated_m_s)
}
estimated_m_values <- profile_likelihood_calc_shape() #all m values are the same, this make sense as m is the dude who will afect loglikelihood
r_profile_loglik_values <- numeric(length(r_range))
for (i in seq_along(estimated_m_values)){
r_profile_loglik_values[i] <- calc_negbinom_loglik_profile(m = estimated_m_values[i], r = r_range[i])
}
r_profile_loglik_values
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
#  scale_x_continuous(breaks = seq(0,56,by=1)) +
# geom_vline(xintercept = 6.9, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
r_estimate
#need to calulcate mle at EACH point
m_range <- seq(1,56, by = 0.1) #values of m for profile m loglikelihood
r_range <- seq(0.01,0.8 , by = 0.01)
calc_negbinom_loglik_profile <- function(r,m){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_mean <- function(){
#Calculate profile for M by calculating mle for R at eacg value of M
estimated_r_s <- numeric(length(m_range))
for(i in seq_along(m_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
m = m_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 0.1,
upper = 30 ,  # i presume shape cant take a ridiculous value like this
method = "L-BFGS-B"
)
estimated_r_s[i] <- mle_profile$par
}
return(estimated_r_s)
}
estimated_r_values <- profile_likelihood_calc_mean()
#For each r in estimated_r_values, sub in M from 1:56 and trace it
m_profile_loglik_values <- numeric(length(m_range))
for (i in seq_along(estimated_r_values)){
m_profile_loglik_values[i] <- calc_negbinom_loglik_profile(r = estimated_r_values[i], m = m_range[i])
}
data_frame(x = m_range, val = m_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,56,by=1)) +
geom_vline(xintercept = 6.9, col = "red", lty = "dashed") +
labs(x = "M parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of M Parameter") +
theme_classic()
#Now we do the profile loglikelihood for the r
#have to redfine function to allow for correct optimisation
calc_negbinom_loglik_profile <- function(m,r){
loglik <- -n*log(gamma(r)) + sum(log(gamma(r+x))) - sum(log(factorial(x))) + sum(x) * log(m/(m+r)) + n*r*log(r/(r+m))
return(loglik)
}
profile_likelihood_calc_shape <- function(){
#Calculate profile for R by calculating mle for M at eacg value of R
estimated_m_s <- numeric(length(r_range))
for(i in seq_along(r_range)){
mle_profile <- #find mle for r at each value of m
optim(
par = 1,
r = r_range[i],
fn = calc_negbinom_loglik_profile ,
control = list(fnscale = -1),
lower = 1,
upper = 100 ,
method = "L-BFGS-B"
)
estimated_m_s[i] <- mle_profile$par
}
return(estimated_m_s)
}
estimated_m_values <- profile_likelihood_calc_shape() #all m values are the same, this make sense as m is the dude who will afect loglikelihood
r_profile_loglik_values <- numeric(length(r_range))
for (i in seq_along(estimated_m_values)){
r_profile_loglik_values[i] <- calc_negbinom_loglik_profile(m = estimated_m_values[i], r = r_range[i])
}
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
#  scale_x_continuous(breaks = seq(0,56,by=1)) +
# geom_vline(xintercept = 6.9, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
#  scale_x_continuous(breaks = seq(0,56,by=1)) +
# geom_vline(xintercept = 6.9, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,0.8,by=0.05)) +
# geom_vline(xintercept = 6.9, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>% View
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,0.8,by=0.05)) +
geom_vline(xintercept = 0.58, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,0.8,by=0.05)) +
geom_vline(xintercept = 0.58, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,0.8,by=0.02)) +
geom_vline(xintercept = 0.58, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point() +
scale_x_continuous(breaks = seq(0,0.8,by=0.02)) +
geom_vline(xintercept = 0.58, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point(size = 1) +
scale_x_continuous(breaks = seq(0,0.8,by=0.02)) +
geom_vline(xintercept = 0.58, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point(size = 1) +
scale_x_continuous(breaks = seq(0,0.8,by=0.02)) +
geom_vline(xintercept = 0.58, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
data_frame(x = r_range, val = r_profile_loglik_values) %>%
ggplot(aes(x=x,y=val))+
geom_point(size = 0.5) +
scale_x_continuous(breaks = seq(0,0.8,by=0.02)) +
geom_vline(xintercept = 0.58, col = "red", lty = "dashed") +
labs(x = "R shape parameter value", y = "Profile Loglikelihood" , title = "Profile Loglikelihood of R Shape Parameter") +
theme_classic()
